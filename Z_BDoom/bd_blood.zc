Class BloodGeneral : DebrisGeneral abstract
{
string bloodfloor;
string bloodceiling;
string bcolor;
Default {
	DebrisGeneral.sfxtype 2;
	+PUFFGETSOWNER
	-NOGRAVITY
	+ROLLSPRITE
	+DONTSPLASH
	gravity 0.7;
	renderstyle "Translucent";
	seesound "none";
	Deathsound "none";
	decal "none";
	height 1;
	}
bool CheckWater() {
	return (GetFloorTerrain().isLiquid == true || bloodfloor == "BLOOD1" || bloodfloor ==  "BLOOD2" || bloodfloor ==  "BLOOD3" || bloodfloor.IndexOf("WATER") >= 0 || bloodfloor.IndexOf("LAVA") >= 0 || bloodfloor.IndexOf("NUKAGE") >= 0 || bloodfloor ==  "SLIME01" || bloodfloor ==  "SLIME02" || bloodfloor ==  "SLIME03" || bloodfloor ==  "SLIME04" || bloodfloor ==  "SLIME05" || bloodfloor ==  "SLIME06" || bloodfloor ==  "SLIME07" || bloodfloor ==  "SLIME08" || bloodfloor ==  "SLIME09" || bloodfloor ==  "SLIME10" || bloodfloor ==  "SLIME11" || bloodfloor ==  "SLIME12");
	}
bool CheckLandingSize (int cradius = 0, bool checkceiling = 0) {
	if (checkceiling == 0)
		return (GetZAt(cradius,0) != floorz || GetZAt(-cradius,0) != floorz || GetZAt(0,cradius) != floorz || GetZAt(0,-cradius) != floorz);
	else
		return (GetZAt(cradius,0,0,GZF_CEILING) > ceilingz || GetZAt(-cradius,0,0,GZF_CEILING) > ceilingz || GetZAt(0,cradius,0,GZF_CEILING) > ceilingz || GetZAt(0,-cradius,0,GZF_CEILING) > ceilingz);
	}
states
	{
	LoadSprites:
		2PLT ABCDEFGHIJKLMNOPQ 0;
		YBL7 ABCDEFGHIJKLMNOPQRS 0;
		YBL8 ABCDEFGHIJKLMNOPQRS 0;
		YBL9 ABCDEFGHIJKLMNOPQRS 0;
		stop;
	Fade:
		#### # 1 A_FadeOut(0.02);
		loop;
	}
}


Class BloodDrop : BloodGeneral replaces Blood
{
double restscale;
Default {
	scale 0.35;
	gravity 0.5;
	renderstyle "Translucent";
	alpha 0.8;
	height 8;
	}
// some rough math incoming but I think it does the job
override void PostBeginPlay() {
	if (target) {
	//obvious green prevalence
		if (target.bloodcolor.G > 4*(target.bloodcolor.R  + target.bloodcolor.B)) {
			bcolor = "green";
			A_SetTranslation("GreenBlood");
			}
	 //obvious blue prevalence
		else if (target.bloodcolor.B > 4*(target.bloodcolor.R  + target.bloodcolor.G)) {
			bcolor = "blue";
			A_SetTranslation("BlueBlood");
			}
	 //obvious red prevalence. bloodcolor = 0 means default bloodcolor (68 00 00 or specified in MAPINFO). If changed in MAPINFO, it'll be a mismatch, but whaddaya do
		else if (target.bloodcolor.R > 4*(target.bloodcolor.B  + target.bloodcolor.G) || target.bloodcolor == 0) {
			bcolor = "red";
			}
	 //if played with another wad that contains very peculiar blood, like yellow or purple, shade sprites along with it
		else {
			A_SetRenderstyle(0.8,STYLE_Shaded);
			SetShade(target.bloodcolor);
			bcolor = "shade";
			}
		}
	restscale = frandom(0.1,0.18);
	Super.PostBeginPlay();
	}

static const string bsprite[] = { "YBL7","YBL8","YBL9" };

virtual void BD_BloodDecal()
	{
	if (bcolor ~== "blue")
		A_SprayDecal("BloodSplatBlue",32);
	else if (bcolor ~== "green")
		A_SprayDecal("BloodSplatGreen",32);
	else if (bcolor ~== "red")
		A_SprayDecal("BloodSplatRed",32);
	//no way to transfer shade to decals, so specially shaded blood particles won't produce decals
	}
states
	{
	spawn:
		TNT1 AAA 0 NoDelay; //override hardcoded frame-skipping behavior for Blood
		TNT1 A 0 {
			A_FaceTarget(0,270,180,0);
			A_SetScale(scale.x*randompick(-1,1)*frandom(0.7,1.2),scale.y*randompick(-1,1)*frandom(0.7,1.2));
			roll = random(0,359);
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			return resolvestate("BloodDrop");
			return resolvestate(null);
			}
	BloodDrop:
		#### ABCDEFGHIJKLMNOPQRS 1 {
			if (waterlevel > 0)
				return ResolveState("Water");
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 0 { 
			A_Stop();
			BD_BloodDecal();
			bloodfloor = TexMan.GetName(floorpic);
			bloodceiling = TexMan.GetName(ceilingpic);
			bFLATSPRITE = true;
			A_SetScale(restscale*randompick(1,-1),restscale*randompick(1,-1));
			return A_CheckCeiling("Ceiling");
			
			if (floorpic == skyflatnum || pos.z != floorz)
				self.destroy();
			A_QueueCorpse();
			if (CheckLandingSize(24)) 
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (CheckLandingSize(18))
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (CheckLandingSize(12))
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (CheckLandingSize(16))
				self.destroy();
			bNOINTERACTION = true;
			return ResolveState(null);
			}
		2PLT A 0 { self.frame = random(0,16); }

		#### # 1 {
			if (waterlevel > 0)
				self.destroy();
			if (CheckWater())
				return ResolveState("Water");
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Raise");
			return ResolveState(null);
			}
		wait;
	Ceiling:
		TNT1 A 0 {
			if (ceilingpic == skyflatnum)
				self.destroy();
			if (CheckLandingSize(24,1))
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (CheckLandingSize(18,1))
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (CheckLandingSize(12,1))
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (CheckLandingSize(6,1))
				self.destroy();
			}
		TNT1 A 0 A_SpawnItemEx("CeilingSplat",0,0,7,0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS);
		stop;
	Raise:
		TNT1 A 0 {
			bNOINTERACTION = false;
			bFLATSPRITE = false;
			bRELATIVETOFLOOR = false;
			roll = random(0,359);
			FlyBack();
			}
		TNT1 a 0 A_Jump(256,1,2,3);
		YBL7 A 0 A_Jump(256,"BloodDrop");
		YBL8 A 0 A_Jump(256,"BloodDrop");
		YBL9 A 0 A_Jump(256,"BloodDrop");
	Raise1:
		#### SRQPONMLKJIHGFEDCBA 1 {
			A_FadeOut(0.07);
			if (target &&  Distance3D(target) < 16)
				self.destroy();
			}
		stop;
	Water:
		#### # 1 {
			A_FadeOut(0.04);
			scale*=1.03;
			}
		loop;
	}
}

//resting version of blood drop without any animation
Class BD_BloodPool : BloodDrop
{
Default {
	+NOINTERACTION
	}
override void BD_BloodDecal() {}
states
	{
	spawn:
		TNT1 A 1 NoDelay {
			A_SetScale(scale.x*randompick(-1,1)*frandom(0.7,1.2),scale.y*randompick(-1,1)*frandom(0.7,1.2));
			SetOrigin((pos.x,pos.y,floorz),0);
			return resolvestate("Death");
			return resolvestate(null);
			}
		stop;
	}
}


Class CeilingSplat : BloodGeneral
{
Default {
	-MISSILE
	+NOGRAVITY
	+FLATSPRITE
	+NOINTERACTION
	height 1;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_QueueCorpse();
		TNT1 A 0 A_Jump(256,random(1,17));
		2PLT ABCDEFGHIJKLMNOPQ 0 A_Jump(256,"Drip");
	Drip:
		#### # 5 {
			SetOrigin((pos.x,pos.y,ceilingz-0.3),0);
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Fade");
			A_SpawnitemEx("CeilingBloodDrop",frandom(-2.0,2.0),frandom(-2.0,2.0),-1.,0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_NOPOINTERS,250);
			A_FadeTo(0.1,0.001,1);
			return ResolveState(null);
			}
		loop;
	}
}

Class CeilingBloodDrop : BloodGeneral
{
Default {
	+FORCEYBILLBOARD
	+NOINTERACTION
	-FLOORCLIP
	scale 0.1;
	alpha 0.75;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay A_SetScale(scale.x*randompick(-1,1)*frandom(1.0,1.3),scale.y);
		BLOD UVWWXXYYY 2;
		TNT1 A 0 { vel.z = -3.7; }
		BLOD ZZZZZZZZZZZZZZZZZZZZZZZZZ 1 {
			if (waterlevel > 0)
				self.destroy();
			if (pos.z <= floorz)
				return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 0 {
			vel.z = 0.0;
			SetOrigin((pos.x,pos.y,floorz+1),0);
			A_SetScale(frandom(0.22,0.25)*randompick(-1,1));
			}
		BLOD GHIJK 3;
		stop;
	}
}


Class AniBloodPool : BloodDrop
{
double psize;
Default {
	+NOINTERACTION
	+RELATIVETOFLOOR
	-MISSILE
	+FLATSPRITE
	height 1;
	renderstyle "Normal";
	decal "none";
	scale 0.2;
	}
override void PostBeginPlay() {
	if (waterlevel > 0)
		self.destroy();
	double pscale;
	pscale = frandom(0.23,0.35);
	psize = pscale*22;
	A_SetScale(pscale*frandom(0.8,1.1)*randompick(-1,1),pscale*frandom(0.8,1.1)*randompick(-1,1));
	super.PostBeginPlay();
	}
bool InvalidFloor() {
	return (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz);
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (InvalidFloor())
				self.destroy();
			SetOrigin((pos.x,pos.y,floorz+0.5),0);
			A_QueueCorpse();
			return A_Jump(128,"Spawn1");
			}
		0000 ABCDEFGHI 2 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=2.0;
			return ResolveState(null);
			}
		0000 JKLMNOPQRSTU 2 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.2;
			return ResolveState(null);
			}
		0000 VWXYZ 3 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		0001 ABCD 3 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		goto rest;
	Spawn1:
		1000 ABCDEFGHI 2 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=2.0;
			return ResolveState(null);
			}
		1000 JKLMNOPQRSTU 2 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.2;
			return ResolveState(null);
			}
		1000 VWXYZ 3 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		1001 ABCD 3 {
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		goto rest;
	Rest:
		#### # 1 {
			if (waterlevel > 0)
				self.destroy();
			if (Checkwater())
				A_FadeOut(0.01);
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Fade");
			return ResolveState(null);
			}
		wait;
	}
}



//decorative blood for gory decorations
Class BloodSpill : CeilingBloodDrop
{
Default {
	scale 0.15;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay A_SetScale(scale.x*randompick(-1,1)*frandom(1.0,1.3),scale.y);
		BLOD XYZ 3;
		TNT1 A 0 { vel.z = -3.7; }
		BLOD ZZZZZZZZZZZZZZZZZZZZZZZZZ 1 {
			if (waterlevel > 0)
				self.destroy();
			if (pos.z <= floorz)
				return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	}
}

//for projectile bullets
Class BD_BloodSplatter : BloodDrop replaces BloodSplatter {}

//thinner and faster version for spurts
Class BloodSpray : BloodDrop
{
Default {
	+THRUACTORS
	scale 0.12;
	gravity 0.5;
	alpha 0.7;
	}
override void BD_BloodDecal()
	{
	if (bcolor ~== "blue")
		A_SprayDecal("BloodSprayBlue",32);
	else if (bcolor ~== "green")
		A_SprayDecal("BloodSprayGreen",32);
	else if (bcolor ~== "red")
		A_SprayDecal("BloodSprayRed",32);
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay {
			A_SetGravity(frandom(0.4,0.6));
			A_SetScale(scale.x*randompick(-1,1),scale.y*randompick(-1,1));
			roll = random(0,359);
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			}
	BloodDrop:
		#### ABCDEFGHIJKLMNOPQRS 1 {
			if (waterlevel > 0)
				return ResolveState("Fade");
			A_FadeOut(0.05);
			return ResolveState(null);
			}
		stop;
	}
}

//long "arterial" spurts
Class BloodSpurt : BloodGeneral replaces AxeBlood
{
double bpitch;
double pitchchange;
double bspeed;
string sprayactor;
Default {
	+NOGRAVITY
	+NOINTERACTION
	radius 1;
	height 1;
	}
override void PostBeginPlay() {
	if (waterlevel > 0)
		self.destroy();
	super.PostBeginPlay();
	bpitch = frandom(1.0,5.0);
	bspeed = frandom(4.0,6.0);
	pitchchange = 0.5;
	sprayactor = "BloodSpray";
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_FaceTarget(0,270,0,0);
		TNT1 A 0 A_Jump(256,random(1,5));
		TNT1 AAAAAAAAA 1 { 
			A_SpawnItemEx(sprayactor,0,0,0,	bspeed+frandom(0.0,1.2),0,bpitch,	random(175,185), SXF_TRANSFERPOINTERS);
			bpitch+=pitchchange;
			}
		stop;
	}
}

Class NeckSpurt : BloodSpurt
{
override void PostBeginPlay() {
	if (waterlevel > 0)
		self.destroy();
	super.PostBeginPlay();
	bpitch = frandom(2.0,5.5);
	bspeed = frandom(1.0,2.5);
	sprayactor = "NeckSpray";
	pitchchange = 0.0;
	}
}

Class FrontalSpurt : BloodSpurt
{
override void PostBeginPlay() {
	if (waterlevel > 0)
		self.destroy();
	super.PostBeginPlay();
	bpitch = frandom(0.3,1.2);
	bspeed = frandom(3.0,4.5);
	sprayactor = "NeckSpray";
	pitchchange = 0.0;
	}
}

//shorter and smaller version of bloodspurt
Class NeckSpray : SmallDebris
{
Default {
	smalldebris.dgravity 0.5;
	scale 0.12;
	alpha 0.7;
	}
static const string bsprite[] =	{ "YBL7","YBL8","YBL9" };
states
	{
	spawn:
		TNT1 A 0 NoDelay {
			A_SetScale(scale.x*randompick(-1,1),scale.y*randompick(-1,1));
			roll = random(0,359);
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			}
		#### ABCDEFGHIJKLMNOPQRS 2 {
			A_FadeOut(0.07);
			return ResolveState(null);
			}
		stop;
	}
}


//large quickly disappearing spray creating a "bloody mist" upon xdeath
Class BFountainSpray : BloodDrop
{
Default {
	-MISSILE
	+NOINTERACTION
	scale 0.45;
	renderstyle "Translucent";
	alpha 0.6;
	}
states
	{
	BloodDrop:
		#### ABCDEFGHIJKKLLMMNNOOOPPPQQQRRRSSS 1 {
			if (waterlevel > 0)
				self.destroy();
			vel.z = clamp(vel.z - 0.3,-2.0,10.0);
			a_Setscale(clamp(scale.x * 1.05,0.0,1.0),clamp(scale.y * 1.05,0.0,1.0));
			a_fadeout(0.02);
			}
		stop;
	}
}