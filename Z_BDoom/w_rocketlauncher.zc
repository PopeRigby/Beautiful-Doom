Class BD_RocketLauncher : BDoomWeapon replaces RocketLauncher
{
	Default
	{
	+WEAPON.NOAUTOFIRE
	Inventory.PickupMessage "$GOTLAUNCHER";
	Tag "$TAG_ROCKETLAUNCHER";
	inventory.pickupsound "pickups/rocketlauncher";
	weapon.ammotype1	"RocketAmmo";
	weapon.ammogive1	0;
	weapon.ammouse1		1;
	weapon.ammotype2 	"RocketAmmo";
	weapon.ammouse2		1;
	weapon.ammogive2	2;
	weapon.selectionorder 250;
	weapon.slotnumber 5;
	}
	
override void DoEffect()
	{
	If (Owner)
		{
		if(bdoom_weapons == 2)
			{
				Ammo1 = ammo(Owner.FindInventory("RLClip"));
				AmmoUse1 = 1;
				AmmoUse2 = 0;
				bAMMO_OPTIONAL = true;
			}
		else
			{
				Ammo1 = ammo(Owner.FindInventory("RocketAmmo"));
				AmmoUse1 = 1;
				AmmoUse2 = 1;
				bAMMO_OPTIONAL = false;
			}
		}
	Super.DoEffect();
	}
	
states
	{
	Spawn:
		LAUN A 1 NoDelay A_JumpIf(Bdoom_weapons == 2,1);
		Loop;
		LAUN B 1;
		loop;
	Select:
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"Select.Modern");
		TNT1 A 0 { if(bdoom_weapons ==1)
			A_PlaySound("weapons/rlan/draw");}
		//TNT1 AAAAAAAA 0 A_Raise();
		RLAN DCBEFG 1 A_WeaponReady(WRF_NOFIRE);
		goto ready;
	Deselect:
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"Deselect.Modern");
		RLAN A 1 A_Lower;
		loop;
	Ready:
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"Ready.Modern");
		RLAN A 1  { if(bdoom_weapons ==1) {
				A_WeaponReady(); }
			else {
				A_WeaponReady(WRF_NOSECONDARY); }
			}
		loop;
	Fire: //8 tics before fire, 12 tics fire, 0 tics refire
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"Fire.Modern");
		RLAN A 2;
		TNT1 A 0 A_GunFlash();
		RLAN ABC 2 ;
		RLAN D 3 A_FireProjectile("BD_Rocket",0,1);
		RLAN CB 3;
		RLAN EFG 1;
		TNT1 A 0 A_Refire();
		goto ready;
	AltFire:
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"AltFire.Modern");
		RLAN A 20 A_PlaySound("weapons/rlan/lock");
		TNT1 A 0 A_GunFlash();
		RLAN ABC 2 ;
		RLAN D 2 A_FireProjectile("BD_HomingRocket",0,1);
		RLAN CB 3;
		RLAN EFG 1;
		RLAN A 15 A_WeaponReady(WRF_NOSECONDARY);
		RLAN A 8 A_ReFire();
		goto ready	;
	Flash:
		RLAF A 2 Bright A_Light1();
		RLAF B 2 Bright;
		RLAF C 2 Bright A_Light2();
		RLAF DE 3 Bright;
		Goto LightDone;
		
//modern;
	Select.Modern:
		TNT1 A 0 A_PlaySound("weapons/RORN/draw");
		RORV C 0 {
			let ws = player.FindPSprite (PSP_Weapon);
			if (countinv("RLCLip") >= 3) {
				ws.sprite = GEtSpriteIndex("RORN");
				ws.frame = 0;
				}
			else if (countinv("RLCLip") >= 2) {
				ws.sprite = GEtSpriteIndex("RORE");
				ws.frame = 0;
				}
			else if (countinv("RLCLip") >= 1) {
				ws.sprite = GEtSpriteIndex("RORE");
				ws.frame = 2;
				}
			else {
				ws.sprite = GEtSpriteIndex("RORV");
				ws.frame = 2;
				}
			}
		#### # 0 A_WeaponOffset(-35.0,74.0);
		#### ####### 1 {
			A_WeaponOffset(5.0,-6.0,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			}
		goto ready;
	Deselect.Modern:
		RORV C 0 {
			let ws = player.FindPSprite (PSP_Weapon);
			if (countinv("RLCLip") >= 3) {
				ws.sprite = GEtSpriteIndex("RORN");
				ws.frame = 0;
				}
			else if (countinv("RLCLip") >= 2) {
				ws.sprite = GEtSpriteIndex("RORE");
				ws.frame = 0;
				}
			else if (countinv("RLCLip") >= 1) {
				ws.sprite = GEtSpriteIndex("RORE");
				ws.frame = 2;
				}
			else {
				ws.sprite = GEtSpriteIndex("RORV");
				ws.frame = 2;
				}
			}
		#### # 1 A_Lower();
		wait;
	Ready.Modern:
		TNT1 A 1 {
			BD_WeaponReady(1);
			let ws = player.FindPSprite (PSP_Weapon);
			if (countinv("RLCLip") >= 3) {
				ws.sprite = GEtSpriteIndex("RORN");
				ws.frame = 0;
				}
			else if (countinv("RLCLip") >= 2) {
				ws.sprite = GEtSpriteIndex("RORE");
				ws.frame = 0;
				}
			else if (countinv("RLCLip") >= 1) {
				ws.sprite = GEtSpriteIndex("RORE");
				ws.frame = 2;
				}
			else {
				ws.sprite = GEtSpriteIndex("RORV");
				ws.frame = 2;
				}
			}
		goto ready;
		//load
		RORN ABC 0; RORE ABC 0; RORV ABC 0; RORT ABC 0;
		RORR ABC 0; //load
		stop;
	Fire.Modern:
		TNT1 A 0 A_JumpIfInventory("RLClip",4,"Fire0.Modern");
		TNT1 A 0 A_JumpIfInventory("RLClip",3,"Fire1.Modern");
		TNT1 A 0 A_JumpIfInventory("RLClip",2,"Fire2.Modern");
		TNT1 A 0 A_JumpIfInventory("RLClip",1,"Fire3.Modern");
		goto DryReload;
	Fire0.Modern:
		RORN A 1;
		RORN B 1;
		RORN C 1 A_FireProjectile("ModernRocket",0,1,0,-6);
		TNT1 A 0 A_SetPitch(pitch - 1.2,SPF_INTERPOLATE);
		RORN D 2;
		RORN C 2;
		RORN B 2;
		RORV ABCDA 2;
		RORN A 1;
		goto ready;
	Fire1.Modern:
		RORN A 1;
		RORN B 1;
		RORN C 1 A_FireProjectile("ModernRocket",0,1,0,-6);
		TNT1 A 0 A_SetPitch(pitch - 1.2,SPF_INTERPOLATE);
		RORN D 2;
		RORN C 2;
		RORN B 2;
		RORV ABCEF 2;
		RORE A 1;
		goto ready;
	Fire2.Modern:
		RORE A 1;
		RORE B 1;
		RORN C 1 A_FireProjectile("ModernRocket",0,1,0,-6);
		TNT1 A 0 A_SetPitch(pitch - 1.2,SPF_INTERPOLATE);
		RORN D 2;
		RORN C 2;
		RORE B 2;
		RORV FGCCC 2;
		RORE C 1;
		goto ready;
	Fire3.Modern:
		RORE C 1;
		RORE D 1;
		RORE E 2 A_FireProjectile("ModernRocket",0,1,0,-6);
		TNT1 A 0 A_SetPitch(pitch - 1.2,SPF_INTERPOLATE);
		RORN D 2;
		RORE E 2;
		RORE D 2;
		RORV C 3;
		goto ready;
	Flash.Modern:
		RLAF A 2 Bright A_Light1();
		RLAF B 2 Bright;
		RLAF C 1 Bright A_Light2();
		RLAF DE 1 Bright;
		Goto LightDone;
	AltFire.Modern:
		TNT1 A 0 A_JumpIfInventory("RLClip",4,"AltFire0.Modern");
		TNT1 A 0 A_JumpIfInventory("RLClip",3,"AltFire1.Modern");
		TNT1 A 0 A_JumpIfInventory("RLClip",2,"AltFire2.Modern");
		TNT1 A 0 A_JumpIfInventory("RLClip",1,"AltFire3.Modern");
		goto DryReload;
	AltFire0.Modern:
		TNT1 A 0 A_TakeInventory("RLClip",1);
		RORN A 1;
		RORN B 1;
		RORN C 1 A_FireProjectile("ModernGrenade",0,0,0,0,0,-5);
		TNT1 A 0 A_SetPitch(pitch - 0.25,SPF_INTERPOLATE);
		RORN D 2;
		RORN C 2;
		RORN B 2;
		RORV ABCDA 2;
		RORN A 1;
		goto ready;
	AltFire1.Modern:
		TNT1 A 0 A_TakeInventory("RLClip",1);
		RORN A 1;
		RORN B 1;
		RORN C 1 A_FireProjectile("ModernGrenade",0,0,0,0,0,-5);
		TNT1 A 0 A_SetPitch(pitch - 0.25,SPF_INTERPOLATE);
		RORN D 2;
		RORN C 2;
		RORN B 2;
		RORV ABCEF 2;
		RORE A 1;
		goto ready;
	AltFire2.Modern:
		TNT1 A 0 A_TakeInventory("RLClip",1);
		RORE A 1;
		RORE B 1;
		RORN C 1 A_FireProjectile("ModernGrenade",0,0,0,0,0,-5);
		TNT1 A 0 A_SetPitch(pitch - 0.25,SPF_INTERPOLATE);
		RORN D 2;
		RORN C 2;
		RORE B 2;
		RORV FGCCC 2;
		RORE C 1;
		goto ready;
	AltFire3.Modern:
		TNT1 A 0 A_TakeInventory("RLClip",1);
		RORE C 1;
		RORE D 1;
		RORE E 2 A_FireProjectile("ModernGrenade",0,0,0,0,0,-5);
		TNT1 A 0 A_SetPitch(pitch - 0.25,SPF_INTERPOLATE);
		RORN D 2;
		RORE E 2;
		RORE D 2;
		RORV C 3;
		goto ready;
	DryReload:
		RORV C 15 A_PlaySound("Mweapons/dry");
	Reload:
		TNT1 A 0 A_JumpIf(CountInv ("RocketAmmo") == 0,"Ready");
		TNT1 A 0 A_Overlay(-3,"ReloadMag");
		TNT1 A 1 {
			let ws = player.FindPSprite (PSP_Weapon);
			ws.sprite = GEtSpriteIndex("RORR");
			if (countinv("RLCLip") > 0)
				ws.frame = 0;
			else
				ws.frame = 1;
			}
		#### ####### 1 A_WeaponOffset(-1.1,0.5,WOF_ADD);
		#### # 8 A_WeaponOffset(0.0,0.0,WOF_ADD);
		#### # 0 A_PlaySound("Mweapons/rocket/clipout",5);
		#### # 1 A_WeaponOffset(1.5,0.0,WOF_ADD);
		#### ### 1 A_WeaponOffset(-0.5,0.0,WOF_ADD);
		
		#### # 30 A_WeaponOffset(0.0,0.0,WOF_ADD);
		
		#### # 0 A_PlaySound("Mweapons/rocket/clipin",5);
		
		#### # 1 A_WeaponOffset(-3.0,0.0,WOF_ADD);
		#### ### 1 A_WeaponOffset(1.0,0.0,WOF_ADD);
		
		#### ####### 1 A_WeaponOffset(1.1,-0.5,WOF_ADD);
		goto ready;
	ReloadMag:
		RORT A 1 {
			let ws = player.FindPSprite (-3);
			ws.sprite = GEtSpriteIndex("RORT");
			if (countinv("RLCLip") > 2)
				ws.frame = 0;
			else if (countinv("RLCLip") > 1)
				ws.frame = 1;
			else
				ws.frame = 2;
			}
		#### ######## 1;
		#### # 8;
		#### ########## 1 A_Overlayoffset(-3,1.8,2.3,WOF_ADD);
		#### # 13 BD_Reload();

		RORT A 1 {
			let ws = player.FindPSprite (-3);
			if (countinv("RLCLip") > 2)
				ws.frame = 0;
			else if (countinv("RLCLip") > 1)
				ws.frame = 1;
			else
				ws.frame = 2;
			}
		#### ########## 1 A_Overlayoffset(-3,-1.8,-2.3,WOF_ADD);
		#### #### 1;
		#### ####### 1;
		stop;
	}
}


Class BD_Rocket : Actor replaces Rocket
{
Default {
	Radius 11;
	Height 8;
	Speed 20;
	Damage 20;
	Projectile;
	+DEHEXPLOSION
	+ZDOOMTRANS
	+ROLLSPRITE
	Obituary "$OB_MPROCKET";
	scale 1.0;
	decal "bigscorch";
	seesound "none";
	deathsound "none";
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay { 
			if(Bdoom_debris == 1)
				A_SpawnItemEx("RocketFlare",-36,0,7,vel.x,vel.y,vel.z,0,SXF_SETMASTER|SXF_ORIGINATOR|SXF_ABSOLUTEVELOCITY); 
			if(bdoom_weapons == 0)
				A_PlaySound("weapons/rocklf",5,1.0);
			if(bdoom_weapons == 1)
				A_PlaySound("weapons/rlan/fire",5,1.0);
			}
		MISL AAAA 1 bright { 
			if(Bdoom_debris==1)
				A_SpawnItemEx("BD_RocketTrail",-15,frandom(-1,1),frandom(5,7),0,0,0,0);
				}
		TNT1 A 0 A_PlaySound("weapons/rlan/fly",4,1.0,1,3);
		MISL A 1 bright { 
			if(Bdoom_debris==1)
				A_SpawnItemEx("BD_RocketTrail",-15,frandom(-1,1),frandom(5,7),0,0,0,0);
				}
		wait;
	Death:
		TNT1 A 0 { 
			A_RemoveChildren(1,RMVF_EVERYTHING);
			A_StopSound(4);
			bFORCEXYBILLBOARD = true;
			A_SetRenderStyle(0.5,STYLE_Add);
			double rs = (frandom(0.38,0.42)*randompick(-1,1));
			A_SetScale(rs,rs);
			A_SetRoll(random(0,359));
			if(bdoom_shakes == 1)
				Radius_Quake(1,8,0,4,0);
			if(bdoom_weapons == 0)
				A_PlaySound("weapons/rocklx",5);
			if(bdoom_weapons == 1)
				A_PlaySound("weapons/rlan/explosion",5);
			if(bdoom_debris == 1) {
				for (int i = 8; i > 0; i--) 
					A_SpawnItemEx("SmokingPiece",0,0,0, random(3,6),0,random(5,8),random(0,360),0,48);
				}
			A_Explode();
			}
		BOM6 ABCDEFGHIJKLMNOPQRST 1 bright;
		stop;
	}
}

Class BD_HomingRocket : BD_Rocket
{
int SeekerCount;
Default {
	+SEEKERMISSILE;
	+SCREENSEEKER;
	speed 17;
	seesound "weapons/rlan/fire";
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay { 
			if(Bdoom_debris==1)
				A_SpawnItemEx("HomingRocketFlare",-36,0,7,vel.x,vel.y,vel.z,0,SXF_SETMASTER|SXF_ORIGINATOR|SXF_ABSOLUTEVELOCITY); 
			if(bdoom_weapons == 0)
				A_PlaySound("weapons/rocklf",5,1.0);
			if(bdoom_weapons == 1)
				A_PlaySound("weapons/rlan/fire",5,1.0);
			}
		MISL AAAA 1 bright { 
			if(Bdoom_debris==1) {
				A_SpawnItemEx("BD_SeekerRocketTrail",-15,frandom(-1,1),frandom(5,7),0,0,0,0);
				}
			}
		TNT1 A 0 { 
			if(Bdoom_debris==1)
				A_SpawnItemEx("SeekerFlare",8,0,8,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM);
			}
		TNT1 A 0 A_PlaySound("weapons/rlan/fly",4,1.0,1,3);
	Spawn1:
		MISL A 1 bright { 
			A_SeekerMissile(0,4, SMF_LOOK | SMF_PRECISE | SMF_CURSPEED,200);
			invoker.SeekerCount++;
			if (invoker.SeekerCount >= 30) {
				invoker.SeekerCount = 0;
				A_SpawnItemEx("SeekerFlare",8,0,8,vel.x,vel.y,vel.z,0,SXF_ABSOLUTEMOMENTUM);
				}
			if(Bdoom_debris==1)
				A_SpawnItemEx("BD_SeekerRocketTrail",-15,frandom(-1,1),frandom(5,7),0,0,0,0);
			}
		loop;
	}
}

Class BD_SeekerRocketTrail : BD_RocketTrail
{
Default {
	scale 0.07;
	}
}

Class ModernRocket : BD_Rocket
{
Class<Actor> trailactor;
Default
	{
	scale 0.4;
	speed 25;
	seesound "Mweapons/rocket/fire";
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	trailactor = "ModernRocketTrail";
	}
//lovely snippet for smoke trail by Arctangent
override void Tick () {
    Vector3 oldPos = self.pos;
    
    Super.Tick();
    if (bdoom_debris && !level.frozen && !globalfreeze) {
		Vector3 path = level.vec3Diff( self.pos, oldPos );
		double distance = path.length() / 4; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );
		
		for( int i = 0; i < steps; i++ )  {
			if (target && distance3d(target) > 128) {
				actor mo = Spawn(trailactor, oldPos );
				mo.vel = (frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
				mo.target = target;
				}
			oldPos = level.vec3Offset( oldPos, direction );
			}
		}
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay { 
			A_PlaySound("weapons/rlan/fly",4,1.0,1,1);
			if(Bdoom_debris==1)
				A_SpawnItemEx("ModernRocketFlare",-6,0,2,vel.x,vel.y,vel.z,0,SXF_SETMASTER|SXF_ORIGINATOR|SXF_ABSOLUTEVELOCITY);
			}
		MROK AAAA 1 bright A_ScaleVelocity(1.2);
		MROK A 1; /*{ 
			if(Bdoom_debris==1)
				A_SpawnItemEx("ModernRocketTrail",-40,frandom(-1,1),frandom(-1,1),0,0,0,0);
			}*/
		wait;
	BrainExplode:
	Death:
		TNT1 A 0 { 
			A_RemoveChildren(1,RMVF_EVERYTHING);
			A_StopSound(4);
			bFORCEXYBILLBOARD = true;
			A_SetRenderStyle(0.5,STYLE_Add);
			double rs = (frandom(0.55,0.57)*randompick(-1,1));
			A_SetScale(rs,rs);
			A_SetRoll(random(0,359));
			A_PlaySound("Mweapons/rocket/explosion",5);
			if(bdoom_shakes == 1)
				Radius_Quake(2,8,0,4,0);
			if(bdoom_debris == 1) {
				for (int i = 20; i > 0; i--)
					A_SpawnItemEx("RicochetSpark",0,0,0,	frandom(-6,6),frandom(-6,6),frandom(3,10),0,0,92);
				if (pos.z <= floorz+10) {
					for (int i = 14; i > 0; i--)
						A_SpawnItemEx("RocketDebris",0,0,0,	frandom(-2,2),frandom(-2,2),frandom(9,12),0,0,92);
					}
				else
					for (int i = 10; i > 0; i--)
						A_SpawnItemEx("RocketDebris",0,0,0,	frandom(-4,4),frandom(-4,4),frandom(2,7),0,0,92);
				}
			A_Explode();
			}
		BOM4 ABCDEFGHIJKLMNOPQ 1 bright {
			if (bdoom_debris == 1)
				A_SpawnItemEx("BigBlackSmoke",random(-12,12),random(-12,12),random(10,20),frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(0.7,1.3),0,SXF_ORIGINATOR,200);
			}
		BOM5 ABCDEFGHIJKLMN 1 bright A_Fadeout(0.04);
		stop;
	}
}

Class RLClip : ammo
{
Default {
	inventory.icon "HDRMZ0";
	inventory.amount 1;
	inventory.maxamount 6;
	ammo.backpackamount 0;
	ammo.backpackmaxamount 6;
	}
}

Class ModernGrenade : ModernRocket
{
default
	{
	scale 0.45;
	-NOGRAVITY;
	gravity 0.3;
	speed 25;
	radius 8;
	height 8;
	bouncetype "Doom";
	wallbouncefactor 0.5;
	bouncefactor 0.45;
	+EXPLODEONWATER;
	-ALLOWBOUNCEONACTORS;
	+FORCEXYBILLBOARD;
	-FLOORCLIP
	seesound "Mweapons/grenade/fire";
	bouncesound "Mweapons/grenade/bounce";	
	missiletype "ModernGrenadeTrail";
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	if (bdoom_debris)
		A_SPawnItemEx("ModernGrenadeFlare",	0,0,0,	0,0,0,	0,SXF_SETMASTER|SXF_ORIGINATOR);
	trailactor = "ModernGrenadeSmoke";
	}
states
	{
	Spawn:
		MROG ABCD 2; 
		loop;
	Death:
		MROG # 35 bright;
		goto super::Death;
	XDeath:
		TNT1 A 0;
		goto super::Death;
	}
}

//yellow flare around the grenade
Class ModernGrenadeFlare : Flare_General
{
Default 
	{
	renderstyle "Add";
	alpha 0.4;
	scale 0.05;
	}
override void Tick()
	{
	super.Tick();
	if (master)
		SetOrigin(master.pos,1);
	else
		self.destroy();
	} 
states
	{
	Spawn:
		LENY A 1 bright NoDelay {
			if (master && master.InStateSequence(master.curstate,master.FindState("Death")))
				return ResolveState("Death");
			return ResolveState(null);
			}
		loop;
	Death:
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		stop;
	}
}

//yellow fading out trail behind the grenade
Class ModernGrenadeTrail : Flare_General
{ 
Default {
	renderstyle "Add";
	alpha 0.15;
	scale 0.04;
	} 
states
	{
	Spawn:
		LENY A 1 NoDelay bright A_FadeOut(0.02);
		wait;
	}
}

Class ModernGrenadeSmoke : WallSmoke
{
Default {
	renderstyle "Add";
	alpha 0.3;
	}
states
	{
	Spawn:
		SM21 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 NoDelay {
			A_Fadeout(0.006);
			a_Setscale(clamp(scale.x*1.07,0.01,0.1),clamp(scale.y*1.07,0.01,0.1));
			vel*=0.95;
			roll+=wrot;
			}
		SM22 ABCDEFGHIJK 1 {
			A_Fadeout(0.005);
			a_Setscale(clamp(scale.x*1.07,0.01,0.1),clamp(scale.y*1.07,0.01,0.1));
			vel*=0.95;
			roll+=wrot;
			}
		wait;
	}
}

Class RocketFlare : Flare_General
{ 
Default {
	renderstyle "Add";
	alpha 0.4;
	scale 0.09;
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	if (master && bdoom_debris)
		A_Warp(AAPTR_MASTER,-36,0,6);
	else
		self.destroy();
	}
states
	{
	Spawn:
		LENR A 1 NoDelay bright;
		loop;
	}
}

Class HomingRocketFlare : RocketFlare
{ 
override void Tick() {
	super.Tick();
	if (bdoom_debris == 1 && master)
		A_Warp(AAPTR_MASTER,-17,0,6,0,WARPF_INTERPOLATE);
	else
		self.Destroy();
	}
}


Class BD_RocketTrail : Rocket1Trail
{ 
Default {
alpha 0.22;
	}
}

//// expensive rocket smoke, unused
//spawner for modern rocket smoke
/*Class ModernRocketTrail : Actor
{
Default {
	+NOGRAVITY
	+NOINTERACTION
	}
states
	{
	Spawn:
		TNT1 AAAA 0 NoDelay {
			if (target && distance3d(target) > 48)
				A_SpawnItemEx("MRocketSmoke",0,0,0,frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5),0,48);
			}
		TNT1 A 1;
		stop;
	}
}
		
//thick grey smoke that spreads around
Class MRocketSmoke : WallSmoke
{
//double fade;
Default {
	renderstyle "Translucent";
	alpha 0.2;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	A_SetScale(frandom(0.025,0.029),frandom(0.025,0.029));
	//fade = 0.005;
	}
states
	{
	Spawn:
		SM21 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 NoDelay {
		//fade = clamp(fade-0.00005,0.0005,0.005);
			A_Fadeout(0.004);
			a_Setscale(clamp(scale.x*1.05,0.01,0.15),clamp(scale.y*1.05,0.01,0.15));
			vel*=0.95;
			roll+=wrot;
			}
		SM22 ABCDEFGHIJK 1 {
			A_Fadeout(0.004);
			a_Setscale(clamp(scale.x*1.05,0.01,0.15),clamp(scale.y*1.05,0.01,0.15));
			vel*=0.95;
			roll+=wrot;
			}
		wait;
	}
}*/

Class ModernRocketTrail : WallSmoke
{
Default {
	renderstyle "Translucent";
	alpha 0.2;
	}
states
	{
	Spawn:
		SM21 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 NoDelay {
			A_Fadeout(0.004);
			a_Setscale(clamp(scale.x*1.07,0.01,0.2),clamp(scale.y*1.07,0.01,0.2));
			vel*=0.95;
			roll+=wrot;
			}
		SM22 ABCDEFGHIJK 1 {
			A_Fadeout(0.003);
			a_Setscale(clamp(scale.x*1.07,0.01,0.2),clamp(scale.y*1.07,0.01,0.2));
			vel*=0.95;
			roll+=wrot;
			}
		wait;
	}
}

//flashes at the end of the homing version of the rocket
Class SeekerFlare : Flare_General
{ 
Default {
+FORCEXYBILLBOARD
+NOGRAVITY;
alpha 0.5;
scale 0.12;
} 
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_PlaySound("weapons/rlan/seek",1,1.0,0,1);
		LENG A 2;
		stop;
	}
}

//yellow tail flare for modern rocket
Class ModernRocketFlare : Flare_General
{ 
Default {
	renderstyle "Add";
	alpha 0.4;
	scale 0.06;
	} 
override void Tick() {
	super.Tick();
	if (bdoom_debris == 1 && master)
		A_Warp(AAPTR_MASTER,-7,0,0,0,WARPF_INTERPOLATE);
	else
		self.Destroy();
	}
states
	{
	Spawn:
		LENY A 1 NoDelay bright ;		
		loop;
	}
}