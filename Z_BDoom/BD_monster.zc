Class BDoomMonster : Actor abstract
{
bool raised; //checked by gibs and blood; if true they'll show special animations
int monsterclip; //used by monsters with guns when bdoom_weapons == 2
property monsterclip : monsterclip;

bool burning; //is showing burning or smoking animation
int burntimer;
int firetype; //0 = only smoke; 1 = regular yellow; 2 = baron green

bool highfall;
/*void BD_CheckFall() {
	if (pos.z >= floorz+128)
		highfall = true;
	}
void BD_Drop() {
	if (highfall)
		A_PlaySound("body/fall");
	}*/
Default {
	Monster;
	BDoomMonster.monsterclip 10;
	attacksound "none";
	}
	
private State prevState;

void BD_Bleed() {
	if (!burning)
		A_SpawnItemEx("Blood",frandom(-5.0,5.0),frandom(-5.0,5.0),frandom(16,20),0,0,0,SXF_SETTARGET);
	}

void BD_Burn() {
	burning = 1;
	burntimer = 0;
	if (firetype == 0)
		A_SetTranslation("Scorched");
	else if (firetype == 1)
		A_SetTranslation("Firedeath");
	else if (firetype == 2)
		A_SetTranslation("GreenFiredeath");
	}

void BD_BulletAttack(double horz_spread, double vert_spread, int numbullets, int damageperbullet, string OldSound, string NewSound, string Casing, double CasingX = 0, double CasingY = 0, double CasingZ = 0, double TracerHeight = 32, double Tracerofs_xy = 0)
	{		
	if (bdoom_debris == 1)
		A_SpawnItemEx(Casing,CasingX,CasingY,CasingZ,		frandom(2,4),0,frandom(2,4),	random(-85,-95),SXF_SETTARGET);
	If(bdoom_weapons == 1)
		A_PlaySound(newsound);
	else			
		A_PlaySound(oldsound);
	if (bdoom_tracers == 1)
		A_CustomBulletAttack(horz_spread, vert_spread, numbullets, damageperbullet, "EnBulletPuff", 0, CBAF_NORANDOM,AAPTR_TARGET,"BulletTracer",TracerHeight,Tracerofs_xy);
	else
		A_CustomBulletAttack(horz_spread, vert_spread, numbullets, damageperbullet, "EnBulletPuff", 0, CBAF_NORANDOM);
	}

state BD_Refire(int ChanceToEnd = 128, statelabel endstate = "See") 
	{ 
	if (bdoom_weapons < 2)
		return ResolveState("See");
	else if (monsterclip == 0)
		return ResolveState("Reload");
	else
		return A_MonsterRefire(ChanceToEnd,endstate);
	return ResolveState(null);
	}
	
override void Tick() {
	super.Tick();

	//burning activated, CVAR allows flames, is not in See state, hasn't been burning long
	if (burning && bdoom_flames == 1 && InStateSequence(curstate,ResolveState("See")) == false && burntimer < 220 ) 
		{
		burntimer++;
	//burn, baby, burn	
		if (burntimer < 100) {
		//type 0 is just smoke (plasma death)
			if (firetype == 0)
				A_SpawnItemEx("BlackSmoke",random(-16,16),random(-16,16),random(8,16),0,0,frandom(0.4,0.9),0,0,80);
			else if (firetype == 1)
				A_SpawnItemEx("ParticleFire_Yellow",random(-16,16),random(-16,16),random(8,16),0,0,frandom(0.5,1.5));
			else if (firetype == 2)
				A_SpawnItemEx("ParticleFire_Green",random(-16,16),random(-16,16),random(8,16),0,0,frandom(0.5,1.5));
			}
	//enough burning, now spawn smoke for a while		
		else {			
			A_SetTranslation("Scorched");
			A_SpawnItemEx("BlackSmoke",random(-16,16),random(-16,16),random(8,16),0,0,frandom(0.4,0.9),0,0,burntimer);
			}
		}
		
	else {
		burning = false;
		burntimer = 0;
		return;
		}
	}

void BD_Gibs()
    {
	if (bdoom_gibs == 0)
		return;

	A_PlaySound("gibs/gibbed");
	for (int i = 18; i > 0; i--)
		A_SpawnItemEx("BFountainSpray",frandom(-5.0,5.0),frandom(-5.0,5.0),random(8,28),vel.x*frandom(0.05,0.15),vel.y*frandom(0.05,0.15),frandom(4.5,6.5),0,SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION,36);
	for (int i = 6; i > 0; i--)
		A_SpawnItemEx("BasicMeatPiece",random(-4,4),random(-4,4),random(10,48),		vel.x*frandom(0.35,1.2),vel.y*frandom(0.35,1.2),random(5,10),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 64);

	A_SpawnItemEx("Gib_Intestine",	frandom(-4,4),frandom(-4,4),frandom(8,28),vel.x*frandom(0.3,0.8),vel.y*frandom(0.3,0.8),frandom(3,5),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 92);
	A_SpawnItemEx("Gib_Intestine",	frandom(-4,4),frandom(-4,4),frandom(8,28),vel.x*frandom(0.3,0.8),vel.y*frandom(0.3,0.8),frandom(3,5),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 170);
	A_SpawnItemEx("Gib_Lung",		frandom(-4,4),frandom(-4,4),frandom(8,28),vel.x*frandom(0.3,0.8),vel.y*frandom(0.3,0.8),frandom(3,5),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 144);
	A_SpawnItemEx("Gib_Lung",		frandom(-4,4),frandom(-4,4),frandom(8,28),vel.x*frandom(0.3,0.8),vel.y*frandom(0.3,0.8),frandom(3,5),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 144);
	A_SpawnItemEx("Gib_liver",		frandom(-4,4),frandom(-4,4),frandom(8,28),vel.x*frandom(0.3,0.8),vel.y*frandom(0.3,0.8),frandom(3,5),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 128);
	A_SpawnItemEx("Gib_kidneys",	frandom(-4,4),frandom(-4,4),frandom(8,28),vel.x*frandom(0.3,0.8),vel.y*frandom(0.3,0.8),frandom(3,5),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 128);
	
	A_SpawnItemEx("Gib_Hand",		frandom(6,4),frandom(-4,4),frandom(35,40),	vel.x*frandom(0.35,1.2), vel.y*frandom(0.35,1.2),frandom(5,10),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 32);
	A_SpawnItemEx("Gib_Hand",		frandom(6,4),frandom(-4,4),frandom(35,40),	vel.x*frandom(0.35,1.2), vel.y*frandom(0.35,1.2),frandom(5,10),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 32);
	A_SpawnItemEx("Gib_Leg",		frandom(6,4),frandom(-4,4),frandom(10,12),	vel.x*frandom(0.35,1.2), vel.y*frandom(0.35,1.2),frandom(5,10),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 32);
	A_SpawnItemEx("Gib_Leg",		frandom(6,4),frandom(-4,4),frandom(10,12),	vel.x*frandom(0.35,1.2), vel.y*frandom(0.35,1.2),frandom(5,10),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 32);
	A_SpawnItemEx("Gib_head",		frandom(-2,2),frandom(-2,2),frandom(42,48),vel.x*frandom(0.35,1.2), vel.y*frandom(0.35,1.2),frandom(5,10),	0,	SXF_ABSOLUTEVELOCITY | SXF_SETTARGET | SXF_TRANSFERTRANSLATION, 32);
	
	actor torso1 = Spawn("Gib_Torso1",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),pos.z+frandom(18,28)));
	torso1.vel.x = vel.x*frandom(0.7,0.95);
	torso1.vel.y = vel.y*frandom(0.7,0.95);
	torso1.vel.z = vel.z*frandom(0.7,0.95);
	torso1.target = self;
	torso1.scale.x = randompick(-1,1);
	actor torso2 = Spawn("Gib_Torso2",(pos.x,pos.y+frandom(-8,8),pos.z+frandom(12,24)));
	torso2.vel.x = vel.x*frandom(0.7,0.95);
	torso2.vel.y = vel.y*frandom(0.7,0.95);
	torso2.vel.z = vel.z*frandom(0.7,0.95);
	torso2.target = self;
	if (torso1.scale.x == -1) //horizontal scale is randomized but synced between pieces of the same torso
		torso2.scale.x = -1;
    }
	
states
	{
	Crush:
		CRS1 A -1;
		stop;
	Deathbleed: //for spawning animated blood pool and flies
		#### # random(35,55) {
			if (burning)
				return ResolveState("DeathEnd");
			return ResolveState(null);
			}
		#### # 1 {
			if (vel.x == 0 && vel.y == 0 && vel.z == 0) {
				if (bdoom_blood == 1)
					A_SpawnItemEx("AniBloodPool",0,0,0,0,0,0,0,SXF_SETTARGET);
				A_SpawnItemEx("CorpseFlySpawner",0,0,0,0,0,0,0,SXF_SETMASTER);
				return ResolveState("DeathEnd");
				}
			return ResolveState(null);
			}
		wait;
	DeathEnd:
		#### # -1;
		stop;
	Raise:
		#### # 2 {
			//raised = true;
			if (self.frame > 0)
				self.frame-=1;
			else
				{
				A_SetTranslation("vanilla");
				A_SetScale(1.0,1.0);
				burning = false;
				burntimer = 0;
				return ResolveState("See");
				}
			return ResolveState(null);
			}
		loop;
	Death.Telefrag:
	Death.Massacre:
		TNT1 A 0 {
			if (FindState("XDeath.Vanilla"))
				return ResolveState("XDeath.Vanilla");
			else if (FindState("XDeath"))
				return ResolveState("XDeath");
			else
				return ResolveState("Death");
			return ResolveState(null);
			}
		POSX AB 2;
		POSX C 2 A_XScream();
		POSX D 2 A_NoBlocking();
		POSX EFGHIJKLMN 2;
		POSX O -1;
		stop;
	Death.Fire:
		TNT1 A 0 {
			if (bdoom_gibs == 1) {
				firetype = 1;
				BD_Burn();
				}
			return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	Death.GreenFire:
		TNT1 A 0 {
			if (bdoom_gibs == 1) {
				firetype = 2;
				BD_Burn();
				}
			return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	Death.PlasmaDamage:
		TNT1 A 0 {
			if (bdoom_gibs == 1) {
				firetype = 0;
				BD_Burn();
				}
			return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	Death.BFGSplash:
		TNT1 A 0 {
			A_SetTranslation("BloodyScorched");
			return ResolveState("XDeath");
			return ResolveState(null);
			}
		stop;
	XDeath.Particles:
		TNT1 A 1 {
			A_XScream();
			A_NoBlocking();
			BD_Gibs();
			}
		TNT1 ABCDEFGHIJKLMN 2;
		goto deathend;
	}
}



Class BD_ZombieBullet : RealBullet
{
Default {
	damageFunction (3 * random(1,5));
	}
}

Class BD_ZombiePellet : RealBullet
{
Default {
	damageFunction (2 * random(3,4));
	}
}