//*********************\\
//*********************\\
//****** G O R E ******\\
//*********************\\
//*********************\\


/////////////////////////
////// SIMPLE GIBS //////
/////////////////////////

/////////////////////////
///// BASIC GIBS ////////
/////////////////////////

class Gibs_General : DebrisGeneral abstract
{
double brot; //how much to adjust rotation during flight
double bmass; //the mass the gib gains after it lands
bool bflat; //whether it needs to get FLATSPRITE when resting
int restframe; //last frame used in death animation
Default {
	DebrisGeneral.sfxtype 3;
	-NOBLOCKMAP 
	-FLOORCLIP
	-THRUACTORS
	-NOGRAVITY
	+EXPLODEONWATER
	+BUDDHA
	+NOPAIN
	bouncetype "Doom";
	bouncefactor 0.3;
	seesound "gibs/rip";
	Bouncesound "gibs/meatland";
	Deathsound "gibs/meatland";
	gravity 0.6;
	mass 1;
	radius 8;
	height 4;
	alpha 1.0;
	translation "0:255=0:255";
	}
virtual void GibBeginPlay() {}
virtual void GibFall() 
	{
	if (bflat)
		bFLATSPRITE = true;
	A_SetMass(bmass);
	roll = 0;
	bVULNERABLE = true;
	bDROPPED = true;
	//bFLOORCLIP = true;
	self.frame = restframe;
	}
states
	{
	LoadSprites:
		GIB1 ABCDEFGHZX 0;
		GIB2 ABCDEFGHZX 0;
		GIB3 ABCDEFGHZX 0;
		GIB4 ABCDEFGHZX 0;
		GIB5 ABCDEFGHZX 0;
		
		GIX1 ABCDEFGHZ 0;
		GIX2 ABCDEFGHZ 0;
		GIX3 ABCDEFGHZ 0;
		GIX4 ABCDEFGHZ 0;
		
		//zombie
		HED1 ABCD 0;
		HND1 ABC 0;
		LEG1 ABCDE 0;
		TR11 ABCDE 0;
		TR12 ABCDE 0;
		//shotgunguy
		HED2 ABC 0;
		HND2 AB 0;
		LEG2 ABCDE 0;
		TR21 ABCDE 0;
		TR22 ABCDE 0;
		//chaingunguy
		HED3 ABC 0;
		HND3 ABC 0;
		LEG3 ABC 0;
		TR31 ABCDE 0;
		TR32 ABCDE 0;
		//imp
		HED4 ABC 0;
		HND4 ABC 0;
		LEG4 ABCD 0;
		TR41 ABCDE 0;
		TR42 ABCDE 0;
		//ss
		HED5 ABC 0;
		HND5 AB 0;
		LEG5 ABC 0;
		SCAP A 0;
		//demon
		HED8 AB 0;
		HND8 AB 0;
		stop;
	}
}

//smaller version of BloodDrop that spawns behind flying gibs
Class BD_GibBlood : BloodDrop {
Default {
	Scale 0.15;
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	restscale = frandom(0.07,0.11);
	}
}

//smaller versions of resting blood pool that spawns by resting gibs when they're pushed by explosions, leaving trails of blood on the floor
Class BD_GibBloodPool : BD_BloodPool
{
Default {
	scale 0.1;
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	restscale = frandom(0.06,0.085);
	}
}

class BasicMeatPiece : Gibs_General
{
Default {
	scale 0.45;
	}
override void GibBeginPlay()
	{
	static const string GibSprite[] =
	{
		"GIB1","GIB2","GIB3","GIB4","GIB5"
	};
	self.sprite = GetSpriteIndex(GibSprite[random(0,4)]);
	bmass = 50;
	brot = randompick(17.0,-17.0);
	A_QueueCorpse();
	restframe = 25;
	}
states
	{
	spawn:
		#### A 0 NoDelay {
			GibBeginPlay();
			scale.x*=randompick(-1,1);
			roll = random(0,359);
			}
		#### A 1 {
			A_SpawnItemEx("BD_GibBlood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
			A_SetRoll(roll+=brot,SPF_INTERPOLATE);
			}
		wait;
	Death:
		#### # 0 GibFall();
		#### # 1  {
			//console.printf("%s, %s",self.GetClassName(),target.GetClassName());
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Raise");
			if (vel.length() > 2)
				A_SpawnItemEx("BD_GibBloodPool",frandom(-2,2),frandom(-2,2),0,	0,0,0,	0,SXF_TRANSFERPOINTERS,80);
			return ResolveState(null);
			}
		wait;
	Raise:
		#### # 0 FlyBack();
		#### A 1 {
			A_SetRoll(roll-=brot,SPF_INTERPOLATE);
			A_FadeOut(0.05);
			if (target &&  Distance3D(target) < 16)
				self.destroy();
			}
		wait;
	}
}

class Gib_Intestine : BasicMeatPiece
{
Default {
	bouncetype "none";
	scale 0.32;
	gravity 0.5;
	}
override void GibBeginPlay()
	{
	bmass = 80;
	bflat = true;
	brot = randompick(5.0,-5.0);
	self.sprite = GetSpriteIndex("GIX2");
	}
}

class Gib_Lung : BasicMeatPiece
{
Default {
	scale 0.23;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("GIX1");
	}
}

class Gib_Liver : BasicMeatPiece
{
Default {
	scale 0.23;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("GIX3");
	}
}

class Gib_Kidneys : BasicMeatPiece //I don't know what that sprite is but it looks non-generic enough to be unique
{
Default {
	scale 0.4;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("GIX4");
	}
}

class Gib_Hand : BasicMeatPiece
{
Default {
	+ROLLCENTER
	scale 0.8;
	}
override void GibBeginPlay()
	{
	bmass = 70;
	brot = randompick(7.0,-7.0);
	if (target){
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("HND1");
			restframe = random(1,2);
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("HND2");
			restframe = 1;
			}
		else if (target is "BD_ChaingunGuy") {
			self.sprite = GetSpriteIndex("HND3");
			restframe = random(1,2);
			}
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("HND4");
			restframe = random(1,2);
			}
		else if (target is "BD_WolfensteinSS") {
			self.sprite = GetSpriteIndex("HND5");
			restframe = 1;
			}
		else if (target is "BD_Demon") {
			self.sprite = GetSpriteIndex("HND8");
			restframe = 1;
			if (target is "BD_Spectre")
				A_SetRenderstyle(0.5,STYLE_OptFuzzy);
			}
		else
			self.destroy();
		}
	}
}

class Gib_Leg : BasicMeatPiece
{
Default {
	+ROLLCENTER
	scale 0.8;
	}
override void GibBeginPlay()
	{
	if (target){
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("LEG1");
			self.frame = random(0,1);
			restframe = random(2,4);
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("LEG2");
			self.frame = random(0,1);
			restframe = random(2,4);
			}
		else if (target is "BD_ChaingunGuy") {
			self.sprite = GetSpriteIndex("LEG3");
			self.frame = 0;
			restframe = random(1,2);
			}
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("LEG4");
			self.frame = random(0,1);
			restframe = random(2,3);
			}
		else if (target is "BD_WolfensteinSS") {
			self.sprite = GetSpriteIndex("LEG5");
			self.frame = 0;
			restframe = random(1,2);
			}
		else
			self.destroy();
		}
	bmass = 70;
	brot = randompick(6.0,-6.0);
	}
}

class Gib_Head : BasicMeatPiece
{
Default {
	+ROLLCENTER
	scale 0.8;
	}
override void GibBeginPlay()
	{
	bmass = 70;
	brot = randompick(9.0,-9.0);
	if (target){
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("HED1");
			restframe = random(1,3);
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("HED2");
			restframe = random(1,2);
			}
		else if (target is "BD_ChaingunGuy") {
			self.sprite = GetSpriteIndex("HED3");
			restframe = random(1,2);
			}
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("HED4");
			restframe = random(1,2);
			}
		else if (target is "BD_WolfensteinSS") {
			self.sprite = GetSpriteIndex("HED5");
			restframe = random(1,2);
			}
		else if (target is "BD_Demon") {
			self.sprite = GetSpriteIndex("HED8");
			restframe = 1;
			brot = randompick(4.0,-4.0);
			bmass = 100;
			if (target is "BD_Spectre")
				A_SetRenderstyle(0.5,STYLE_OptFuzzy);
			}
		else
			self.destroy();
		}
	}
}

class Gib_Torso1 : BasicMeatPiece
{
int finalframe; //last frame used in the flying animation
Default {
	-MISSILE
	bouncetype "none";
	gravity 1.0;
	scale 1.0;
	}
override void GibBeginPlay()
	{
	if (target) {
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("TR11");
			finalframe = 3; 
			restframe =  6; 
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("TR21");
			finalframe = 3; 
			restframe =  7;
			}	
		else if (target is "BD_ChainGunGuy") {
			self.sprite = GetSpriteIndex("TR31");
			finalframe = 4; 
			restframe =  8; 
			}	
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("TR41");
			finalframe = 3; 
			restframe =  7; 
			}		
		else if (target is "BD_WolfensteinSS") //the SS soldier has only 1 torso set that is used as his death animation on the WolfesteinSS actor directly
			self.destroy();	
		}
	bmass = 200;
	}
states
	{
	Spawn:
		#### A 1 NoDelay {
			if (!target)
				console.printf("I'm here but have no target");
			}
		#### A 1 GibBeginPlay();
		#### # 3 {
			A_SpawnItemEx("BloodDrop",frandom(-2,2),frandom(-2,2),frandom(8,22),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
			if (self.frame < finalframe)
				self.frame++;
			if (pos.z <= floorz+1) {
				A_SetMass(bmass);
				A_Playsound("gibs/meatland");
				return ResolveState("Land");
				}
			return ResolveState(null);
			}
		wait;
	Land:
		#### # 4 {
			if (self.frame < restframe)
				self.frame++;
			if (vel == (0,0,0)) {
				bNOINTERACTION = true;
				bRELATIVETOFLOOR = true;
				return ResolveState("Rest");
				}
			return ResolveState(null);
			}
		loop;
	Rest:
		#### # 1 {
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Raise");
			return ResolveState(null);
			}
		loop;
	Raise:
		#### # 0 FlyBack();
		#### # 3 {
			if (self.frame > 0)
				self.frame--;
			A_FadeOut(0.06);
			if (target &&  Distance3D(target) < 16)
				self.destroy();
			}
		wait;
	loadsprites:
		TR11 ABCDEFG 0;
		TR12 ABCDEFG 0;
		TR21 ABCDEFGH 0;
		TR22 ABCDEFGH 0;
		stop;
	}
}

Class Gib_Torso2 : Gib_Torso1
{
override void GibBeginPlay()
	{
	if (target) {
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("TR12");
			finalframe = 3; 
			restframe =  6; 
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("TR22");
			finalframe = 3; 
			restframe =  7; 
			}	
		else if (target is "BD_ChainGunGuy") {
			self.sprite = GetSpriteIndex("TR32");
			finalframe = 3; 
			restframe =  7; 
			}			
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("TR42");
			finalframe = 3; 
			restframe =  7; 
			}		
		else if (target is "BD_WolfensteinSS")
			self.destroy();
		}
	}
}


